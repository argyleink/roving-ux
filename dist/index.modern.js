const e={LEFT:37,UP:38,RIGHT:39,DOWN:40},t=new Map,n=e=>{const{currentTarget:n}=e;t.get("last_rover")!=n&&t.has(n)&&(d(n,t.get(n).active),t.set("last_rover",n))},r=t=>{const{currentTarget:n}=t;switch(t.keyCode){case e[isRtl?"LEFT":"RIGHT"]:case e.DOWN:t.preventDefault(),o(n);break;case e[isRtl?"RIGHT":"LEFT"]:case e.UP:t.preventDefault(),c(n)}},s=new MutationObserver((e,a)=>{const o=new Set;t.forEach((e,t)=>{o.add(t.classList[0])}),e.filter(e=>e.removedNodes.length>0).forEach(e=>{e.removedNodes.forEach(e=>{1===e.nodeType&&t.forEach((a,o)=>{if("last_rover"!==o&&e.contains(o)){var c;const e=a;o.removeEventListener("focusin",n),o.removeEventListener("keydown",r),t.delete(o),e.targets.forEach(e=>e.tabIndex=""),0===(null==(c=[...t.keys()])?void 0:c.filter(e=>"last_rover"!==e)).length&&(t.clear(),s.disconnect())}})})})}),a=({element:e,target:a})=>{window.getComputedStyle(document.documentElement);const o=e.querySelectorAll(a||":scope *"),c=o[0];e.tabIndex=-1,o.forEach(e=>e.tabIndex=-1),c.tabIndex=0,t.set(e,{targets:o,active:c,index:0}),e.addEventListener("focusin",n),e.addEventListener("keydown",r),s.observe(document,{childList:!0,subtree:!0})},o=e=>{const n=t.get(e);n.index+=1,n.index>n.targets.length-1&&(n.index=n.targets.length-1);let r=n.targets[n.index];r&&d(e,r)},c=e=>{const n=t.get(e);n.index-=1,n.index<1&&(n.index=0);let r=n.targets[n.index];r&&d(e,r)},d=(e,n)=>{const r=t.get(e);r.active.tabIndex=-1,r.active=n,r.active.tabIndex=0,r.active.focus()};export{a as rovingIndex};
//# sourceMappingURL=index.modern.js.map
