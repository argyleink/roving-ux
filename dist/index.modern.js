const e=new Map,t="rtl"===window.getComputedStyle(document.documentElement).direction,n={LEFT:37,UP:38,RIGHT:39,DOWN:40},r=t=>{const{currentTarget:n}=t;e.get("last_rover")!=n&&e.has(n)&&(i(n,e.get(n).active),e.set("last_rover",n))},a=e=>{const{currentTarget:r}=e;switch(e.keyCode){case n[t?"LEFT":"RIGHT"]:case n.DOWN:e.preventDefault(),c(r);break;case n[t?"RIGHT":"LEFT"]:case n.UP:e.preventDefault(),d(r)}},s=new MutationObserver((t,n)=>{t.filter(e=>e.removedNodes.length>0).forEach(t=>{[...t.removedNodes].filter(e=>1===e.nodeType).forEach(t=>{e.forEach((n,o)=>{"last_rover"!==o&&t.contains(o)&&(o.removeEventListener("focusin",r),o.removeEventListener("keydown",a),e.delete(o),n.targets.forEach(e=>e.tabIndex=""),(0===e.size||1===e.size&&e.has("last_rover"))&&(e.clear(),s.disconnect()))})})})}),o=({element:t,target:n})=>{const o=t.querySelectorAll(n||":scope *"),c=o[0];t.tabIndex=-1,o.forEach(e=>e.tabIndex=-1),c.tabIndex=0,e.set(t,{targets:o,active:c,index:0}),t.addEventListener("focusin",r),t.addEventListener("keydown",a),s.observe(document,{childList:!0,subtree:!0})},c=t=>{const n=e.get(t);n.index+=1,n.index>n.targets.length-1&&(n.index=n.targets.length-1);let r=n.targets[n.index];r&&i(t,r)},d=t=>{const n=e.get(t);n.index-=1,n.index<1&&(n.index=0);let r=n.targets[n.index];r&&i(t,r)},i=(t,n)=>{const r=e.get(t);r.active.tabIndex=-1,r.active=n,r.active.tabIndex=0,r.active.focus()};export{o as rovingIndex};
//# sourceMappingURL=index.modern.js.map
